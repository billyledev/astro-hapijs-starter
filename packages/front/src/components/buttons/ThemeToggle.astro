---
import { Icon } from 'astro-icon/components';
---

<theme-toggle>
  <button id="themeToggle" type="button" aria-label="Switch between dark and light themes" class="lg:align-sub inline-flex items-center group" data-aw-toggle-color-scheme>
    <div class="flex">
      <Icon id="icosun" name="ri:sun-line"/>
      <Icon id="icomoon" name="ri:moon-line"/>
    </div>
  </button>
</theme-toggle>

<style>
  :global(:not(.dark)) {
    #icosun {
      @apply text-gray-600 group-hover:text-primary w-4;
    }
  
    #icomoon {
      @apply text-transparent w-0;
    }
  }

  :global(.dark) {
    #icomoon {
      @apply text-gray-200 group-hover:text-primary w-4;
    }

    #icosun {
      @apply text-transparent group-hover:text-transparent w-0;
    }
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme') ?? 'light';
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
          return 'light';
      })();

      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }

      window.localStorage.setItem('theme', theme);

      const handleToggleClick = () => {
        const element = document.documentElement;
        element.classList.toggle('dark');

        const isDark = element.classList.contains('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
      }

      document.getElementById('themeToggle')?.addEventListener('click', handleToggleClick);
    }
  }

  customElements.define('theme-toggle', ThemeToggle);
</script>
